#!/usr/bin/env bash

# Exit immediately if a command exits with a non-zero status
set -e

# Functions

function error() {
  local red="\033[31m"
  local reset="\033[0m"
  local prefix="[ERROR] "
  local message=$1
  echo -e "${red}${prefix}${message}${reset}"
}

function success() {
  local green="\033[32m"
  local reset="\033[0m"
  local prefix="[SUCCESS] "
  local message=$1
  echo -e "${green}${prefix}${message}${reset}"
}

function warning() {
  local yellow="\033[33m"
  local reset="\033[0m"
  local prefix="[WARNING] "
  local message=$1
}

function info() {
  local cyan="\033[36m"
  local reset="\033[0m"
  local prefix="[INFO] "
  local message=$1
  echo -e "${cyan}${prefix}${message}${reset}"
}

#
function check_arguments() {
  # Check the number of arguments
  if [ "$#" -ne 1 ]; then
    error "Invalid number of arguments."
    exit 1
  fi

  # Check if the argument is valid
  if [ "$1" == "install" ]; then
    return 0
  elif [ "$1" == "uninstall" ]; then
    return 0
  elif [ "$1" == "link" ]; then
    return 0
  elif [ "$1" == "unlink" ]; then
    return 0
  else
    error "Invalid argument."
    exit 1
  fi
}

#
function check_os() {
  os=""

  # FIXME: This is not the best way to check the OS

  # macOS
  if is_macos; then
    os="macos"
  fi

  # Linux
  if is_linux; then
    os="linux"
  fi

  # Windows Subsystem for Linux
  if is_wsl; then
    # Trust that wsl is identical to linux.
    os="linux"
  fi

  # Windows
  if is_windows; then
    os="windows"
  fi

  # os is set
  if [ -n "$os" ]; then
    info "Detected OS: $os"
    return 0
  fi

  # os is not set (unsupported OS)
  error "OS not supported."
  exit 1
}

#
function is_linux() {
  # Linux
  if [[ "$(uname -s)" == "Linux" ]]; then
    # If available, use LSB to identify distribution
    lsb_dist=$(get_distribution)

    # Check for supported distributions
    case $lsb_dist in
      ubuntu)
        info "Distribution: Ubuntu"
        return 0
        ;;
      debian|raspbian)
        info "Distribution: Debian|Raspbian"
        return 0
        ;;
      zorin)
        info "Distribution: Zorin"
        return 0
        ;;
      fedora|centos|rhel)
        info "Distribution: Fedora|CentOS|RHEL"
        return 1
        ;;
      *)
        warning "Distribution: Unknown"
        return 1
        ;;
    esac
    return 0
  else
    return 1
  fi
}

#
function get_distribution() {
  # SEE: https://github.com/docker/docker-install/blob/6d51e2cd8c04b38e1c2237820245f4fc262aca6c/install.sh#L254-L263

  if [ -r /etc/os-release ]; then
    lsb_dist="$(. /etc/os-release && echo "$ID")"
  fi
  echo "$lsb_dist"
}

#
function is_macos() {
  # Mac OS X
  if [[ "$(uname -s)" == "Darwin" ]]; then
    return 0
  else
    return 1
  fi
}

#
function is_windows() {
  # Windows
  if grep -qEi "(msys|mingw64)" /proc/version &> /dev/null; then
    return 0
  fi
  return 1
}

#
function is_wsl() {
  # SEE: https://github.com/docker/docker-install/blob/6d51e2cd8c04b38e1c2237820245f4fc262aca6c/install.sh#L224-L230

  # WSL 1
  if grep -qEi "(Microsoft|WSL)" /proc/version &> /dev/null; then
    warning "WSL 1 is not officially supported."
    return 0
  # WSL 2
  elif grep -qEi "microsoft" /proc/version &> /dev/null; then
    return 0
  fi
  return 1
}


#
info "Bootstrap script started."

#
info "Checking arguments..."
check_arguments "$@"

#
info "Checking OS..."
check_os

# Set the script based on the argument
info "Setting the script based on the argument..."
if [ "$1" == "install" ]; then
  script="script/$os/install"
elif [ "$1" == "uninstall" ]; then
  script="script/$os/uninstall"
elif [ "$1" == "link" ]; then
  script="script/$os/link"
elif [ "$1" == "unlink" ]; then
  script="script/$os/unlink"
else
  error "Invalid argument."
  exit 1
fi

#
info "Arguments: $@"
info "Script: $script"

# Run the script
info "Running $script..."
source "$script"
info "$script finished."

#
info "Bootstrap script finished."
exit 0
