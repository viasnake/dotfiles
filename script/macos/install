#!/usr/bin/env bash

# Exit immediately if a command exits with a non-zero status
set -e

#
PATH="$PATH:/opt/homebrew/bin"
PATH="$PATH:$HOME/.local/bin"

function error() {
  local red="\033[31m"
  local reset="\033[0m"
  local prefix="[ERROR] "
  local message=$1
  echo -e "${red}${prefix}${message}${reset}"
}

function success() {
  local green="\033[32m"
  local reset="\033[0m"
  local prefix="[SUCCESS] "
  local message=$1
  echo -e "${green}${prefix}${message}${reset}"
}

function warning() {
  local yellow="\033[33m"
  local reset="\033[0m"
  local prefix="[WARNING] "
  local message=$1
}

function info() {
  local cyan="\033[36m"
  local reset="\033[0m"
  local prefix="[INFO] "
  local message=$1
  echo -e "${cyan}${prefix}${message}${reset}"
}

# Install dependencies
{
  info "Installing dependencies..."

  # Check if update-success-stamp exists and is older than 1 day
  info "Checking for updates..."
  if [[ ! -e /var/lib/apt/periodic/update-success-stamp || $(find /var/lib/apt/periodic/update-success-stamp -mtime +1) ]]; then
    info "Update apt..."
    sudo apt update
  else
    info "Apt is up to date"
  fi

  #
  info "Checking dependencies..."
  dependencies=(
    build-essential
    curl
    file
    git
    procps
    unzip
  )

  for package in "${dependencies[@]}"; do
    # Check if package is installed
    if dpkg -l "$package" >/dev/null 2>&1; then
      info "$package is already installed"
      continue
    fi

    # Install package
    warning "$package is not installed"
    info "Installing $package..."
    sudo apt-get install -y "$package"
    success "$package installed successfully"
  done

  #
  info "Dependencies installed successfully"
}

# Install Homebrew
{
  info "Checking Homebrew..."

  #
  if ! which brew >/dev/null 2>&1; then
    warning "Homebrew is not installed"
    info "Installing Homebrew..."
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
    success "Homebrew installed successfully"
  else
    info "Homebrew is already installed"
  fi
}

# Install fish
{
  info "Checking Fish..."

  #
  if ! which fish >/dev/null 2>&1; then
    warning "Fish is not installed"
    info "Installing Fish..."
    brew install fish
    # Add fish to /etc/shells
    # If already added, it will not be added again
    if ! grep -q "/home/linuxbrew/.linuxbrew/bin/fish" /etc/shells; then
      echo "/home/linuxbrew/.linuxbrew/bin/fish" | sudo tee -a /etc/shells >/dev/null
    fi
    success "Fish installed successfully"
  else
    info "Fish is already installed"
  fi
}

# Install brew packages
{
  info "Installing brew packages..."

  #
  brew bundle --global --file="$HOME/.Brewfile"
  success "Brew packages installed successfully"
}

# Install fonts
{
  info "Installing fonts..."

  #
  info "Checking fonts..."
  # fc-list
  if fc-list | grep -q "Firge"; then
    info "Fonts are already installed"
    exit 0
  fi

  #
  info "Downloading FirgeNerd font..."
  ## https://github.com/yuru7/Firge/releases/tag/v0.3.0
  url="https://github.com/yuru7/Firge/releases/download/v0.3.0/FirgeNerd_v0.3.0.zip"
  wget -O "$PWD/config/fonts/FirgeNerd_v0.3.0.zip" "$url"

  #
  info "Extracting FirgeNerd font..."
  unzip -o "$PWD/config/fonts/FirgeNerd_v0.3.0.zip" -d "$HOME/.local/share/fonts"

  #
  info "Downloading Firge font..."
  url="https://github.com/yuru7/Firge/releases/download/v0.3.0/Firge_v0.3.0.zip"
  wget -O "$PWD/config/fonts/Firge_v0.3.0.zip" "$url"

  #
  info "Extracting Firge font..."
  unzip -o "$PWD/config/fonts/Firge_v0.3.0.zip" -d "$HOME/.local/share/fonts"

  #
  info "Updating font cache..."
  fc-cache -fv

  success "Fonts installed successfully"
}
